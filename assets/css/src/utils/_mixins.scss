//
// Mixins
// --------------------------------------------------

// fonts
// -------------------------

@mixin thinfont() {
  font-family: FFClanWebProThin,sans-serif;
  font-weight: normal;
  font-style: normal;
}
@mixin mediumfont() {
  font-family: FFClanWebProMedium,sans-serif; 
  font-weight: normal;
  font-style: normal;
}
@mixin mediumitalicfont() {
  font-family: FFClanWebProMediumItalic,sans-serif; 
  font-weight: normal;
  font-style: normal;
}
@mixin bookfont() {
  font-family: FFClanWebProBook,sans-serif; 
  font-weight: normal;
  font-style: normal;
  //transition: text-shadow .3s;
}

@mixin bookfonthover() {
  font-family: FFClanWebProBook,sans-serif;
  font-weight: normal;
  font-style: normal;
  text-shadow: 0 0 .65px #fff, 0 0 .65px #fff;
}


@mixin bookfontbold() {
  font-family: FFClanWebProBook,sans-serif;
  font-weight: bold;
  font-style: normal;
}
@mixin bookitalicfont() {
  font-family: FFClanWebProBookItalic,sans-serif; 
  font-weight: normal;
  font-style: normal;
}


// Clear fix
// -------------------------

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Reset List
// -------------------------

@mixin resetlist() {
  &:before,
  &:after {
    content: " ";
  }
}


// Grid generation
// -------------------------

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  } 
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

@mixin make-grid($class) {
  @include loop-grid-columns($grid-columns, $class, width);
  //uncomment if you need to use these...
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($lower, $breakpoints) {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-between($name, $name, $breakpoints) {
    @content;
  }
}


// Sprite generation
// -------------------------

////
/// @author Mike Street
/// @group Sprite
////

/// Convert pixels to ems
///
/// @param {Number} $px - value to convert
/// @param {Number} $base-fontsize ($base-font-size) - `<body>` font size
///
/// @example scss
///  $font-size-in-ems: mq-px2em(16px);
///  p { font-size: mq-px2em(16px); }
///
/// @requires $base-font-size
/// @returns {Number}
@function mq-px2em($px, $base-fontsize: $base-font-size) {
    @return $px;
}
/// Add class for <IE9 sprite fallback
/// @group sprite
/// @type String
$ieSprite: '.lt-ie9' !default;

/// Set the `$sprite` map
/// @group sprite
$sprite: map-get($icons, sprite) !default;

/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
    $newIcon: map-get($icons, $icon);
    @if $newIcon == null {
        @warn "Can't find an icon with the name #{$icon}";
    }
    @return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
    $attr: (
        width: sprite-attr($icon, width),
        height: sprite-attr($icon, height),
        x: sprite-attr($icon, backgroundX),
        y: sprite-attr($icon, backgroundY)
    );

    @return $attr;
}

/// Get the width of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_width($icon) {
    @return mq-px2em(sprite-attr($icon, width));
}

/// Get the height of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_height($icon) {
    @return mq-px2em(sprite-attr($icon, height));
}

/// Assign the correct SVG background image and dimensions to the element
%sprite {
    display: inline-block;
    background-image: url(map-get($sprite, svgPath));
    background-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));
}
/// Add an SVG sprite icon using em positioning, with a PNG icon for browsers with the `$ieSprite` class using px positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
///     @include sprite(arrow);
///     &:hover {
///         @include sprite(arrowDown, bg)
///     }
/// }
///
/// @example css - Output
/// .class {
///     display: inline-block;
///     background-image: url("../img/sprite.svg");
///     background-size: 34.25em 32.1875em;
/// }
///
/// .lt-ie9 .class {
///     background-image: url("../img/sprite.png");
/// }
///
/// .class {
///     width: 1.3125em;
///     height: 1.3125em;
///     background-position: -0.3125em -0.3125em;
/// }
/// .lt-ie9 .class {
///     width: 20px;
///     height: 20px;
///     background-position: -5px -5px;
/// }
/// .class:hover {
///     background-position: -2.25em -2.25em;
/// }
/// .lt-ie9 .class:hover {
///     background-position: -36px -36px;
/// }
@mixin sprite($icon, $type: all) {
    @if $type == all {
        // Shares the backgrounds
        @extend %sprite;
    }

    $iconMap: icon-attr($icon);

    // Outputs dimensions in em
    @if $type == all or $type == size {
        width: mq-px2em(map-get($iconMap, width) + 1);
        height: mq-px2em(map-get($iconMap, height) + 1);
    }

    // Outputs background position in em
    @if $type == all or $type == bg {
        background-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);
    }


}

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}  
}

//Link states

@mixin link-hover-states {
    &:hover, &:active, &:focus {
        @content;
    }
}

@mixin link-all-states {
    &:hover, &:active, &:focus, &.lit, &.active, &.hover {
        @content;
    }
}

// Bscground gradients
@mixin background-grad-1 {
	background: rgba(0,0,0,0.5);
	background: -webkit-linear-gradient(rgba(0,0,0,0) 0%, rgba(0,0,0,0.5) 50%);
	background: -o-linear-gradient(rgba(0,0,0,0) 0%, rgba(0,0,0,0.5) 50%);
	background: -moz-linear-gradient(rgba(0,0,0,0) 0%, rgba(0,0,0,0.5) 50%); 
	background: linear-gradient(rgba(0,0,0,0) 0%, rgba(0,0,0,0.5) 50%);
}
@mixin background-grad-2 {
	background: -webkit-linear-gradient(bottom, rgba(0,0,0,.75) 0%, rgba(0,0,0,0.75) 100%);
	background: -o-linear-gradient(bottom, rgba(0,0,0,.75) 0%, rgba(0,0,0,0.75) 100%);
	background: -moz-linear-gradient(bottom, rgba(0,0,0,.75) 0%, rgba(0,0,0,0.75) 100%);
	background: linear-gradient(to top, rgba(0,0,0,.75) 0%, rgba(0,0,0,0.75) 100%);
}

@mixin background-grad-3 {
	background: -webkit-linear-gradient(bottom, rgba(28,38,49,1) 0%, rgba(0,0,0,0.55) 100%);
	background: -o-linear-gradient(bottom, rgba(28,38,49,1) 0%, rgba(0,0,0,0.55) 100%);
	background: -moz-linear-gradient(bottom, rgba(28,38,49,1) 0%, rgba(0,0,0,0.55) 100%);
	background: linear-gradient(to top, rgba(28,38,49,1) 0%, rgba(0,0,0,0.55) 100%);
}

@mixin background-grad-4 {
  background: -webkit-linear-gradient(top,rgba(68,68,68,0),rgba(0,0,0,.65));
  background: -o-linear-gradient(top,rgba(68,68,68,0),rgba(0,0,0,.65));
  background: -moz-linear-gradient(top,rgba(68,68,68,0),rgba(0,0,0,.65));
  background: linear-gradient(to bottom,rgba(68,68,68,0),rgba(0,0,0,.65));
}

@mixin background-grad-5 {
	background: -webkit-linear-gradient(bottom, rgba(0,0,0,.25) 0%, rgba(0,0,0,0.25) 100%);
	background: -o-linear-gradient(bottom, rgba(0,0,0,.25) 0%, rgba(0,0,0,0.25) 100%);
	background: -moz-linear-gradient(bottom, rgba(0,0,0,.25) 0%, rgba(0,0,0,0.25) 100%);
	background: linear-gradient(to top, rgba(0,0,0,.25) 0%, rgba(0,0,0,0.25) 100%);
}
